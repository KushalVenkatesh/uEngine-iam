management:
  security:
    enabled: false

security:
  basic:
    enabled: false
  ignored: /**
  password:
    encoder:
      secret1: Bar12345Bar12345
      secret2: ThisIsASecretKet

spring:
  security:
    enabled: false
  data:
    rest:
      basePath: /api/v1

server:
  port: 8080
  servletPath: /

# ========================================
#  IAM 시스템 Configuration
# ========================================

iam:
# 어드민 정보
  admin:
    username: admin
    password: admin
# jwt 발급 정보 및 키
  jwt:
    key: fcf5afd7-be51-4dfc-949f-d4ab768b985d
    issuer: ${spring.application.name}
    oldRefreshTokenTimeout: 60

# 시스템 이메일 정보 (옵셔널)
  mail:
    host: smtp.gmail.com
    username: "sppark@uengine.org"
    password: "!gosu23546"
    port: 587
    smtp-auth: true
    smtp-starttls-enable: true
    from-address: sppark@uengine.org
    from-name: uengine

# =============================================
#  스코프 - 주로 백엔드 서비스에 해당됩니다.
# =============================================
scopes:
  - name: definition-service
    description: 디자이너 서비스의 접근을 허용합니다.

  - name: process-service
    description: 인스턴스 서비스의 접근을 허용합니다.


# =============================================
#  클라이언트 - 주로 프론트 엔드 어플리케이션에 해당됩니다.
# =============================================
clients:
  - name: uEngine5
    description: uEngine5 Bpm Application
    clientKey: my-client-key
    clientSecret: my-client-secret

    # 토큰 발급시 요청할 수 있는 스코프 목록.
    enable-scopes: definition-service,process-service

    # client-key,client-secret 헤더로 Rest api 를 호출할 수 있는 권한.
    # 회원 가입,사용자 정보 수정등의 rest api 를 호출할 수 있다.
    # 서드파티 어플리케이션은 권한을 주면 안되고, 오피셜 어플리케이션은 권한을 가지는것을 추천.
    access-rest-enable: true

    # 클라이언트 활성화 여부
    activeClient: true

    # 지원하는 그런트 타입.
    authorizedGrantTypes: code,implicit,password,credentials

    # code,implicit 방식의 로그인일 때 리다이렉트 되는 주소.
    webServerRedirectUri: http://front-end.pas-mini.io#login-redirect

    # 리프레쉬 토큰 발급.
    refreshTokenValidity: true

    # 만기 토큰 자동 삭제.
    autoDeletionToken: true

    # JWT 토큰 콘텍스트에 포함될 정보 : clientKey,scopes,type,refreshToken,userName,user | ALL
    requiredContext: clientKey,scopes,type,refreshToken,userName,user

    # JWT 토큰 알고리즘: HS256 or RS256
    jwtAlgorithm: HS256

    # code 인증 방식의 유지시간.
    codeLifetime: 36000

    # 리프레쉬 토큰 유효시간
    refreshTokenLifetime: 2592000

    # 어세스 토큰 유효시간
    accessTokenLifetime: 3600

    # 사용자 알림 메일 발송 SIGN_UP,SIGNED_UP,FORGOT_PASSWORD,PASSWORD_CHANGED | ALL
    notification: ALL

---
# =============================================
#  레파지토리 - 데이터 베이스 정보입니다.
# =============================================

spring:
  profiles: local
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        show_sql: true
  datasource:
    url: jdbc:mysql://localhost:3306/msa
    username: root
    password:

# ======================
#  Eureka Configuration
# ======================

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true
  instance:
    statusPageUrlPath: ${server.servletPath}info
    healthCheckUrlPath: ${server.servletPath}health
    metadataMap:
        deployment: local
        profile: local

---
spring:
  profiles: docker
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        show_sql: true
  datasource:
    url: jdbc:mysql://${vcap.services.db.internal}/uengine
    username: root
    password: my-secret-pw

# ======================
#  Eureka Configuration
# ======================

eureka:
  client:
    serviceUrl:
      defaultZone: http://${vcap.services.eureka-server.internal}/eureka/
    healthcheck:
      enabled: true
  instance:
    hostname: ${HOST}
    nonSecurePort: ${PORT}
    preferIpAddress: false
    statusPageUrl: http://${eureka.instance.hostname}:${eureka.instance.nonSecurePort}/info
    healthCheckUrl: http://${eureka.instance.hostname}:${eureka.instance.nonSecurePort}/health
    homePageUrl: http://${eureka.instance.hostname}:${eureka.instance.nonSecurePort}/
    instanceId: ${HOST}:${spring.application.name}:${PORT}
    metadataMap:
        project: ${CI_PROJECT_NAME}
        commitSha: ${CI_COMMIT_SHA}
        image: ${MARATHON_APP_DOCKER_IMAGE}
        deployment: ${DEPLOYMENT}
        profile: ${PROFILE}